FROM php:8.3.20-apache

# Arguments for non-root user (commented out if not used yet)
ARG USER_NAME=nonroot
ARG USER_ID=1000
ARG GROUP_NAME=www-data

# Environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV MY_WORKDIR=/var/www/html
# Useds in entrypoint
ENV MY_USER_NAME=${USER_NAME}
ENV MY_GROUP_NAME=${GROUP_NAME}

# System dependencies installation
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    tini \
    ca-certificates \
    curl \
    git \
    npm \
    unzip \
    libxml2-dev \
    libzip-dev \
    default-jre \
    graphviz && \
    apt-get autoremove -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
    
# PHP extensions
RUN pecl install xdebug-3.3.0 && \
    docker-php-ext-enable xdebug

RUN docker-php-ext-install -j"$(nproc)" \
    mysqli \
    pdo \
    pdo_mysql \
    soap \
    zip

# Enable Apache modules
RUN a2enmod rewrite

# COMPOSER 
RUN curl -sS https://getcomposer.org/installer | php && mv composer.phar /usr/local/bin/composer

# Create user and group (uncomment if you want to control UID/GID manually)
RUN groupadd --force $GROUP_NAME && useradd -G $GROUP_NAME --uid $USER_ID -s /bin/bash -m $USER_NAME

# Create working directory with proper permissions
RUN mkdir -p $MY_WORKDIR
#RUN chown -R $USER_NAME:$GROUP_NAME $MY_WORKDIR

# Folder session
RUN mkdir -p /var/lib/php/sessions && \
    chown -R ${USER_NAME}:${GROUP_NAME} /var/lib/php/sessions && \
    chmod 700 /var/lib/php/sessions

# Copy entrypoint
COPY ./update-permissions.sh /usr/local/bin/update-permissions.sh
RUN chmod +x /usr/local/bin/update-permissions.sh

# Switch to the created user
USER $USER_NAME

# Set working directory
WORKDIR $MY_WORKDIR

# Use tini as the init system to handle zombie processes
ENTRYPOINT ["/usr/bin/tini", "--"]

# Keep the container running indefinitely
CMD ["bash", "update-permissions.sh"]
